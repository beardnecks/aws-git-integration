AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Git Webhooks to clone repository contents to S3. For integrating 3rd
  party git products with AWS Services like CodePipeline/CodeBuild (qs-1nfhrd9bh)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: General Settings
      Parameters:
      - SourceBucketName
      - CustomDomainName
    - Label:
        default: Git Pull Settings
      Parameters:
      - ApiSecret
      - AllowedIps
      - DevBranchRegex
      - ProdBranchRegex
    ParameterLabels:
      AllowedIps:
        default: Allowed IPs
      ApiSecret:
        default: API Secret
      CustomDomainName:
        default: Custom Domain Name
      SourceBucketName:
        default: Source code S3 Bucket Name
      DevBranchRegex:
        default: Regex for what branches to run development pipeline
      ProdBranchRegex:
        default: Regex for what branches to run production pipeline
      PRRegex:
        default: Regex for what pull requests to run pipeline based on destination
          branch
Parameters:
  AllowedIps:
    Description: gitpull method only. Comma seperated list of IP CIDR blocks for source
      IP authentication. The BitBucket Cloud IP ranges are provided as defaults.
    Type: String
    Default: ''
  ApiSecret:
    Description: 'gitpull method only. WebHook Secrets for use with GitHub Enterprise
      and GitLab. If a secret is matched IP range authentication is bypassed. Cannot
      contain: , \ "'
    Type: String
    Default: ''
  CustomDomainName:
    Description: Use a custom domain name for the webhook endpoint, if left blank
      API Gateway will create a domain name for you
    Type: String
    Default: ''
  SourceBucketName:
    Description: 'OPTIONAL: Bucket Name where the zip file output should be placed,
      if left blank a bucket name will be automatically generated.'
    Type: String
    Default: ''
  ProdBranchRegex:
    Description: Regex for what branches to run production pipeline
    Type: String
    Default: ^master
  DevBranchRegex:
    Description: Regex for what branches to run development pipeline
    Type: String
    Default: ^(?!master).+
  PRRegex:
    Description: Regex for what pull requests to run pipeline based on destination
      branch
    Type: String
    Default: ^master
Conditions:
  UseAllowedIps:
    Fn::Not:
    - Fn::Equals:
      - Ref: AllowedIps
      - ''
  UseApiSecret:
    Fn::Not:
    - Fn::Equals:
      - Ref: ApiSecret
      - ''
  UseCustomDomain:
    Fn::Not:
    - Fn::Equals:
      - Ref: CustomDomainName
      - ''
  AutoGenSourceBucketName:
    Fn::Not:
    - Fn::Equals:
      - Ref: SourceBucketName
      - ''
Resources:
  KeyBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags: []
  IPBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags: []
  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::If:
        - AutoGenSourceBucketName
        - Ref: SourceBucketName
        - Ref: AWS::NoValue
      VersioningConfiguration:
        Status: Enabled
      Tags: []
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: git CodePipeline integration, used to encrypt/decrypt ssh keys
        stored in S3
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
        - Sid: Allow access for Key Administrators
          Effect: Allow
          Principal:
            AWS:
            - Fn::Join:
              - ''
              - - 'arn:aws:iam::'
                - Ref: AWS::AccountId
                - :root
          Action:
          - kms:Create*
          - kms:Describe*
          - kms:Enable*
          - kms:List*
          - kms:Put*
          - kms:Update*
          - kms:Revoke*
          - kms:Disable*
          - kms:Get*
          - kms:Delete*
          - kms:ScheduleKeyDeletion
          - kms:CancelKeyDeletion
          Resource: '*'
        - Sid: Allow use of the key
          Effect: Allow
          Principal:
            AWS:
            - Fn::Join:
              - ''
              - - 'arn:aws:iam::'
                - Ref: AWS::AccountId
                - :root
          Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:DescribeKey
          Resource: '*'
        - Sid: Allow attachment of persistent resources
          Effect: Allow
          Principal:
            AWS:
            - Fn::Join:
              - ''
              - - 'arn:aws:iam::'
                - Ref: AWS::AccountId
                - :root
          Action:
          - kms:CreateGrant
          - kms:ListGrants
          - kms:RevokeGrant
          Resource: '*'
          Condition:
            Bool:
              kms:GrantIsForAWSResource: true
  CreateSSHKeyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: git2cp-sshkeygen
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: KeyBucket
                - /enc_key
          - Effect: Allow
            Action:
            - kms:Encrypt
            Resource:
            - Fn::GetAtt:
              - KMSKey
              - Arn
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - arn:aws:logs:*:*:*
  CreateSSHKeyLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CreateSSHKey/
      Handler: app.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - CreateSSHKeyRole
        - Arn
      Runtime: python3.7
      Timeout: 120
  CreateSSHKey:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - CreateSSHKeyLambda
        - Arn
      KeyBucket:
        Ref: KeyBucket
      Region:
        Ref: AWS::Region
      KMSKey:
        Ref: KMSKey
  GitPullRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: git2cp-gitpull
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource:
              Fn::GetAtt:
              - FindGitPublicIPsLambda
              - Arn
          - Effect: Allow
            Action:
            - kms:Decrypt
            Resource:
            - Fn::GetAtt:
              - KMSKey
              - Arn
          - Effect: Allow
            Action:
            - s3:PutObject
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: SourceBucket
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: SourceBucket
                - /*
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: KeyBucket
                - /enc_key
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: IPBucket
                - /ips
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - arn:aws:logs:*:*:*
  GitPullLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      MemorySize: 192
      Role:
        Fn::GetAtt:
        - GitPullRole
        - Arn
      Runtime: python3.7
      Timeout: 300
      Environment:
        Variables:
          ExcludeGit: 'True'
          IPBucket:
            Ref: IPBucket
          IPLambda:
            Ref: FindGitPublicIPsLambda
      CodeUri: GitPull/
      Layers:
      - arn:aws:lambda:eu-west-1:553035198032:layer:git:10
  WebHookRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
      - PolicyName: git2cp-webhook
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeAsync
            - lambda:InvokeFunction
            Resource:
            - Fn::GetAtt:
              - GitPullLambda
              - Arn
  WebHookApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        swagger: '2.0'
        info:
          version: '2016-07-26T07:34:38Z'
          title:
            Fn::Join:
            - ''
            - - G2CP-
              - Ref: AWS::StackName
        schemes:
        - https
        paths:
          /gitpull:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                type: aws
                credentials:
                  Fn::GetAtt:
                  - WebHookRole
                  - Arn
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.X-Amz-Invocation-Type: '''Event'''
                passthroughBehavior: when_no_templates
                httpMethod: POST
                uri:
                  Fn::Join:
                  - ''
                  - - 'arn:aws:apigateway:'
                    - Ref: AWS::Region
                    - :lambda:path//2015-03-31/functions/
                    - Fn::GetAtt:
                      - GitPullLambda
                      - Arn
                    - /invocations
                requestTemplates:
                  application/json:
                    Fn::Join:
                    - ''
                    - - '#set($allParams = $input.params())

                        '
                      - '{

                        '
                      - '"body-json" : $input.json(''$''),

                        '
                      - '"params" : {

                        '
                      - '#foreach($type in $allParams.keySet())

                        '
                      - '    #set($params = $allParams.get($type))

                        '
                      - '"$type" : {

                        '
                      - '    #foreach($paramName in $params.keySet())

                        '
                      - '    "$paramName" : "$util.escapeJavaScript($params.get($paramName))"

                        '
                      - '        #if($foreach.hasNext),#end

                        '
                      - '    #end

                        '
                      - '}

                        '
                      - '    #if($foreach.hasNext),#end

                        '
                      - '#end

                        '
                      - '},

                        '
                      - '"stage-variables" : {

                        '
                      - '#foreach($key in $stageVariables.keySet())

                        '
                      - '"$key" : "$util.escapeJavaScript($stageVariables.get($key))"

                        '
                      - '    #if($foreach.hasNext),#end

                        '
                      - '#end

                        '
                      - '},

                        '
                      - '"context" : {

                        '
                      - '    "account-id" : "$context.identity.accountId",

                        '
                      - '    "api-id" : "$context.apiId",

                        '
                      - '    "api-key" : "$context.identity.apiKey",

                        '
                      - '    "authorizer-principal-id" : "$context.authorizer.principalId",

                        '
                      - '    "caller" : "$context.identity.caller",

                        '
                      - '    "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",

                        '
                      - '    "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",

                        '
                      - '    "cognito-identity-id" : "$context.identity.cognitoIdentityId",

                        '
                      - '    "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",

                        '
                      - '    "http-method" : "$context.httpMethod",

                        '
                      - '    "stage" : "$context.stage",

                        '
                      - '    "source-ip" : "$context.identity.sourceIp",

                        '
                      - '    "user" : "$context.identity.user",

                        '
                      - '    "user-agent" : "$context.identity.userAgent",

                        '
                      - '    "user-arn" : "$context.identity.userArn",

                        '
                      - '    "request-id" : "$context.requestId",

                        '
                      - '    "resource-id" : "$context.resourceId",

                        '
                      - '    "resource-path" : "$context.resourcePath",

                        '
                      - '    "allowed-ips" : "$stageVariables.allowedips",

                        '
                      - '    "api-secrets" : "$stageVariables.apisecrets",

                        '
                      - '    "dev-branch-regex-base64" : "$stageVariables.devbranchregexbase64",

                        '
                      - '    "prod-branch-regex-base64" : "$stageVariables.prodbranchregexbase64",

                        '
                      - '    "pr-regex-base64" : "$stageVariables.prregexbase64",

                        '
                      - '    "key-bucket" : "'
                      - Ref: KeyBucket
                      - '",

                        '
                      - '    "ip-bucket" : "'
                      - Ref: IPBucket
                      - '",

                        '
                      - '    "source-bucket" : "$stageVariables.sourcebucket",

                        '
                      - '    "public-key" : "'
                      - Ref: CreateSSHKey
                      - '",

                        '
                      - '    "raw-body" : "$util.escapeJavaScript($input.body).replace("\''","''")"

                        '
                      - '    }

                        '
                      - '}'
        securityDefinitions:
          sigv4:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: awsSigv4
        definitions:
          Empty:
            type: object
  WebHookApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: WebHookApi
      StageName: DummyStage
  WebHookApiProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: WebHookApiDeployment
      RestApiId:
        Ref: WebHookApi
      StageName: Prod
      Variables:
        sourcebucket:
          Ref: SourceBucket
        allowedips:
          Fn::If:
          - UseAllowedIps
          - Ref: AllowedIps
          - Ref: AWS::NoValue
        apisecrets:
          Fn::If:
          - UseApiSecret
          - Ref: ApiSecret
          - Ref: AWS::NoValue
        devbranchregexbase64:
          Fn::Base64:
            Ref: DevBranchRegex
        prodbranchregexbase64:
          Fn::Base64:
            Ref: ProdBranchRegex
        prregexbase64:
          Fn::Base64:
            Ref: PRRegex
  CustomDomainCertificate:
    Condition: UseCustomDomain
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Ref: CustomDomainName
  WebHookApiCustomDomainName:
    Condition: UseCustomDomain
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn:
        Ref: CustomDomainCertificate
      DomainName:
        Ref: CustomDomainName
  WebHookApiCustomDomainNameMapping:
    Condition: UseCustomDomain
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName:
        Ref: CustomDomainName
      RestApiId:
        Ref: WebHookApi
  DeleteBucketContentsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: git2cp-deletebucketcontents
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: IPBucket
                - /*
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: KeyBucket
                - /*
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: SourceBucket
                - /*
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: IPBucket
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: KeyBucket
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: SourceBucket
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - arn:aws:logs:*:*:*
  DeleteBucketContentsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - DeleteBucketContentsRole
        - Arn
      Runtime: python3.7
      Timeout: 300
      CodeUri: DeleteBucketContents/
  DeleteBucketContents:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - DeleteBucketContentsLambda
        - Arn
      KeyBucket:
        Ref: KeyBucket
      SourceBucket:
        Ref: SourceBucket
      IPBucket:
        Ref: IPBucket
  FindGitPublicIPsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: git2cp-sshkeygen
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: IPBucket
                - /ips
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - arn:aws:logs:*:*:*
  FindGitPublicIPsLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: FindGitPublicIPs/
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Runtime: python3.7
      Timeout: 30
      Role:
        Fn::GetAtt:
        - FindGitPublicIPsRole
        - Arn
      Environment:
        Variables:
          IPBucket:
            Ref: IPBucket
Outputs:
  CustomDomainNameCNAME:
    Value:
      Fn::If:
      - UseCustomDomain
      - Fn::GetAtt:
        - WebHookApiCustomDomainName
        - DistributionDomainName
      - ''
  PublicSSHKey:
    Value:
      Ref: CreateSSHKey
  GitPullWebHookApi:
    Value:
      Fn::Join:
      - ''
      - - ' https://'
        - Fn::If:
          - UseCustomDomain
          - Ref: CustomDomainName
          - Fn::Join:
            - ''
            - - Ref: WebHookApi
              - .execute-api.
              - Ref: AWS::Region
              - .amazonaws.com
        - /
        - Ref: WebHookApiProdStage
        - /gitpull
  SourceBucketName:
    Value:
      Ref: SourceBucket
